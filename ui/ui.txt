import React, { useState, useEffect } from 'react';
import { Plus, Edit3, Trash2, Save, X, FileText, Calendar, Clock } from 'lucide-react';

const NotesApp = () => {
  const [notes, setNotes] = useState([]);
  const [selectedNote, setSelectedNote] = useState(null);
  const [isCreating, setIsCreating] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({ title: '', content: '' });

  // Load notes from memory on component mount
  useEffect(() => {
    // Initialize with some sample notes
    const sampleNotes = [
      {
        id: 1,
        title: "Welcome to Your Notes!",
        content: "This is your first note. You can create, edit, and delete notes as needed. Click on any note to view its content, or use the + button to create a new one.",
        createdAt: new Date(Date.now() - 86400000).toISOString(), // Yesterday
        updatedAt: new Date(Date.now() - 86400000).toISOString()
      },
      {
        id: 2,
        title: "Ideas & Inspiration",
        content: "• Morning coffee at the new café downtown\n• Book recommendation: 'The Art of Thinking'\n• Weekend hiking trail to explore\n• Photography project ideas",
        createdAt: new Date(Date.now() - 172800000).toISOString(), // 2 days ago
        updatedAt: new Date(Date.now() - 3600000).toISOString() // 1 hour ago
      }
    ];
    setNotes(sampleNotes);
  }, []);

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffTime = Math.abs(now - date);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays === 1) return 'Today';
    if (diffDays === 2) return 'Yesterday';
    if (diffDays <= 7) return `${diffDays - 1} days ago`;
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric', 
      year: date.getFullYear() !== now.getFullYear() ? 'numeric' : undefined 
    });
  };

  const handleCreateNote = () => {
    if (!formData.title.trim()) return;
    
    const newNote = {
      id: Date.now(),
      title: formData.title.trim(),
      content: formData.content.trim(),
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    setNotes([newNote, ...notes]);
    setFormData({ title: '', content: '' });
    setIsCreating(false);
    setSelectedNote(newNote);
  };

  const handleUpdateNote = () => {
    if (!formData.title.trim()) return;
    
    const updatedNotes = notes.map(note => 
      note.id === selectedNote.id 
        ? {
            ...note,
            title: formData.title.trim(),
            content: formData.content.trim(),
            updatedAt: new Date().toISOString()
          }
        : note
    );
    
    setNotes(updatedNotes);
    const updatedNote = updatedNotes.find(note => note.id === selectedNote.id);
    setSelectedNote(updatedNote);
    setIsEditing(false);
  };

  const handleDeleteNote = (noteId) => {
    setNotes(notes.filter(note => note.id !== noteId));
    if (selectedNote && selectedNote.id === noteId) {
      setSelectedNote(null);
    }
  };

  const startEdit = () => {
    setFormData({
      title: selectedNote.title,
      content: selectedNote.content
    });
    setIsEditing(true);
  };

  const startCreate = () => {
    setFormData({ title: '', content: '' });
    setIsCreating(true);
    setSelectedNote(null);
  };

  const cancelEdit = () => {
    setIsEditing(false);
    setIsCreating(false);
    setFormData({ title: '', content: '' });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50">
      <div className="max-w-7xl mx-auto p-6">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent mb-2">
            My Creative Notes
          </h1>
          <p className="text-gray-600">Capture your thoughts, ideas, and inspiration</p>
        </div>

        <div className="grid lg:grid-cols-3 gap-6">
          {/* Notes List */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden">
              <div className="p-6 bg-gradient-to-r from-indigo-500 to-purple-500 text-white">
                <div className="flex items-center justify-between">
                  <h2 className="text-xl font-semibold flex items-center gap-2">
                    <FileText className="w-5 h-5" />
                    Notes ({notes.length})
                  </h2>
                  <button
                    onClick={startCreate}
                    className="bg-white/20 hover:bg-white/30 backdrop-blur-sm rounded-full p-2 transition-all duration-200 transform hover:scale-105"
                  >
                    <Plus className="w-5 h-5" />
                  </button>
                </div>
              </div>
              
              <div className="max-h-96 overflow-y-auto">
                {notes.length === 0 ? (
                  <div className="p-8 text-center text-gray-500">
                    <FileText className="w-12 h-12 mx-auto mb-3 opacity-30" />
                    <p>No notes yet</p>
                    <p className="text-sm">Create your first note!</p>
                  </div>
                ) : (
                  notes.map((note) => (
                    <div
                      key={note.id}
                      onClick={() => setSelectedNote(note)}
                      className={`p-4 border-b border-gray-100 cursor-pointer transition-all duration-200 hover:bg-indigo-50 ${
                        selectedNote?.id === note.id ? 'bg-indigo-50 border-l-4 border-l-indigo-500' : ''
                      }`}
                    >
                      <h3 className="font-semibold text-gray-800 mb-1 truncate">{note.title}</h3>
                      <div className="flex items-center text-xs text-gray-500 gap-4">
                        <span className="flex items-center gap-1">
                          <Calendar className="w-3 h-3" />
                          {formatDate(note.createdAt)}
                        </span>
                        {note.updatedAt !== note.createdAt && (
                          <span className="flex items-center gap-1 text-indigo-600">
                            <Clock className="w-3 h-3" />
                            Updated
                          </span>
                        )}
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>

          {/* Note Details/Editor */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-2xl shadow-xl border border-gray-100 min-h-96">
              {isCreating || isEditing ? (
                /* Editor Mode */
                <div className="p-6">
                  <div className="flex items-center justify-between mb-6">
                    <h2 className="text-2xl font-bold text-gray-800">
                      {isCreating ? 'Create New Note' : 'Edit Note'}
                    </h2>
                    <div className="flex gap-2">
                      <button
                        onClick={isCreating ? handleCreateNote : handleUpdateNote}
                        disabled={!formData.title.trim()}
                        className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white px-4 py-2 rounded-xl flex items-center gap-2 hover:from-indigo-600 hover:to-purple-600 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-105"
                      >
                        <Save className="w-4 h-4" />
                        Save
                      </button>
                      <button
                        onClick={cancelEdit}
                        className="bg-gray-100 text-gray-600 px-4 py-2 rounded-xl flex items-center gap-2 hover:bg-gray-200 transition-all duration-200"
                      >
                        <X className="w-4 h-4" />
                        Cancel
                      </button>
                    </div>
                  </div>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Title <span className="text-red-500">*</span>
                      </label>
                      <input
                        type="text"
                        value={formData.title}
                        onChange={(e) => setFormData({...formData, title: e.target.value})}
                        placeholder="Enter note title..."
                        className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 text-lg"
                        autoFocus
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Content
                      </label>
                      <textarea
                        value={formData.content}
                        onChange={(e) => setFormData({...formData, content: e.target.value})}
                        placeholder="Write your thoughts here..."
                        rows={12}
                        className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition-all duration-200 resize-none"
                      />
                    </div>
                  </div>
                </div>
              ) : selectedNote ? (
                /* View Mode */
                <div className="p-6">
                  <div className="flex items-start justify-between mb-6">
                    <div>
                      <h2 className="text-3xl font-bold text-gray-800 mb-2">{selectedNote.title}</h2>
                      <div className="flex items-center gap-4 text-sm text-gray-500">
                        <span className="flex items-center gap-1">
                          <Calendar className="w-4 h-4" />
                          Created {formatDate(selectedNote.createdAt)}
                        </span>
                        {selectedNote.updatedAt !== selectedNote.createdAt && (
                          <span className="flex items-center gap-1 text-indigo-600">
                            <Clock className="w-4 h-4" />
                            Updated {formatDate(selectedNote.updatedAt)}
                          </span>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex gap-2">
                      <button
                        onClick={startEdit}
                        className="bg-indigo-100 text-indigo-600 p-2 rounded-xl hover:bg-indigo-200 transition-all duration-200 transform hover:scale-105"
                      >
                        <Edit3 className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => handleDeleteNote(selectedNote.id)}
                        className="bg-red-100 text-red-600 p-2 rounded-xl hover:bg-red-200 transition-all duration-200 transform hover:scale-105"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                  
                  <div className="prose max-w-none">
                    {selectedNote.content ? (
                      <div className="bg-gray-50 rounded-xl p-6 min-h-64">
                        <pre className="whitespace-pre-wrap text-gray-700 font-sans leading-relaxed">
                          {selectedNote.content}
                        </pre>
                      </div>
                    ) : (
                      <div className="bg-gray-50 rounded-xl p-12 text-center text-gray-500 min-h-64 flex items-center justify-center">
                        <div>
                          <FileText className="w-12 h-12 mx-auto mb-3 opacity-30" />
                          <p>This note has no content</p>
                          <button 
                            onClick={startEdit}
                            className="text-indigo-600 hover:text-indigo-700 text-sm mt-2"
                          >
                            Add some content
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ) : (
                /* Welcome Screen */
                <div className="p-12 text-center text-gray-500 min-h-96 flex items-center justify-center">
                  <div>
                    <div className="bg-gradient-to-br from-indigo-100 to-purple-100 rounded-full w-24 h-24 flex items-center justify-center mx-auto mb-6">
                      <FileText className="w-12 h-12 text-indigo-600" />
                    </div>
                    <h3 className="text-xl font-semibold text-gray-700 mb-2">Select a note to view</h3>
                    <p className="text-gray-500 mb-6">Choose a note from the list or create a new one</p>
                    <button
                      onClick={startCreate}
                      className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white px-6 py-3 rounded-xl flex items-center gap-2 mx-auto hover:from-indigo-600 hover:to-purple-600 transition-all duration-200 transform hover:scale-105"
                    >
                      <Plus className="w-5 h-5" />
                      Create Your First Note
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NotesApp;